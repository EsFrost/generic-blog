This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-23T15:29:38.054Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.editorconfig
.gitignore
angular copy 2.json
angular copy.json
angular.json
package.json
README.md
src/app/api/api.service.ts
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.config.ts
src/app/app.routes.ts
src/app/auth.guard.spec.ts
src/app/auth.guard.ts
src/app/components/back-to-the-top/back-to-the-top.css
src/app/components/back-to-the-top/back-to-the-top.html
src/app/components/back-to-the-top/back-to-the-top.ts
src/app/components/create-category-dialog/craete-category-dialog.component.ts
src/app/components/create-category-dialog/create-category-dialog.component.html
src/app/components/dashboard/dashboard.component.html
src/app/components/dashboard/dashboard.component.ts
src/app/components/edit-category-dialog/edit-category-dialog.component.html
src/app/components/edit-category-dialog/edit-category-dialog.component.ts
src/app/components/edit-post/edit-post.component.html
src/app/components/edit-post/edit-post.component.ts
src/app/components/login/login.component.html
src/app/components/login/login.component.ts
src/app/components/new-post/new-post.component.html
src/app/components/new-post/new-post.component.ts
src/app/components/post/post.component.css
src/app/components/post/post.component.html
src/app/components/post/post.component.ts
src/app/components/posts/posts.component.html
src/app/components/posts/posts.component.ts
src/app/services/auth.service.ts
src/app/utils/interfaces.ts
src/index.html
src/main.ts
src/proxy.conf.json
src/styles.css
tailwind.config.js
todo
tsconfig.app.json
tsconfig.json
tsconfig.spec.json

================================================================
Repository Files
================================================================

================
File: .editorconfig
================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false

================
File: .gitignore
================
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db

================
File: angular copy 2.json
================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "generic-blog": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/generic-blog",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "src/assets/uploads",
                "output": "/assets/uploads"
              },
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "browserTarget": "generic-blog:build",
            "watch": true,
            "watchOptions": {
              "ignored": [],
              "followSymlinks": true,
              "awaitWriteFinish": {
                "stabilityThreshold": 2000,
                "pollInterval": 100
              }
            }
          }
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": ["zone.js", "zone.js/testing"],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "src/assets/uploads",
                "output": "/assets/uploads"
              },
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          }
        }
      }
    }
  }
}

================
File: angular copy.json
================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "generic-blog": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/generic-blog",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "generic-blog:build:production"
            },
            "development": {
              "buildTarget": "generic-blog:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": ["zone.js", "zone.js/testing"],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          }
        }
      }
    }
  }
}

================
File: angular.json
================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "generic-blog": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/generic-blog",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "src/assets/uploads",
                "output": "/assets/uploads"
              },
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"],
            "watch": true
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true,
              "poll": 2000
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "generic-blog:build:production"
            },
            "development": {
              "buildTarget": "generic-blog:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": ["zone.js", "zone.js/testing"],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "src/assets/uploads",
                "output": "/assets/uploads"
              },
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          }
        }
      }
    }
  }
}

================
File: package.json
================
{
  "name": "generic-blog",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --watch --poll=2000",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.0.0",
    "@angular/common": "^19.0.0",
    "@angular/compiler": "^19.0.0",
    "@angular/core": "^19.0.0",
    "@angular/forms": "^19.0.0",
    "@angular/platform-browser": "^19.0.0",
    "@angular/platform-browser-dynamic": "^19.0.0",
    "@angular/router": "^19.0.0",
    "@tailwindcss/typography": "^0.5.16",
    "@tinymce/tinymce-angular": "^8.0.1",
    "rxjs": "~7.8.0",
    "tinymce": "^7.6.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.0.6",
    "@angular/cli": "^19.0.6",
    "@angular/compiler-cli": "^19.0.0",
    "@types/jasmine": "~5.1.0",
    "autoprefixer": "^10.4.20",
    "jasmine-core": "~5.4.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.6.2"
  }
}

================
File: README.md
================
# GenericBlog

This project was generated using [Angular CLI](https://github.com/angular/angular-cli) version 19.0.6.

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.

================
File: src/app/api/api.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';

interface PostData {
  title: string;
  content: string;
  image_url?: string;
}

interface CategoryData {
  name: string;
}

@Injectable({
  providedIn: 'root',
})
export class ApiService {
  private http = inject(HttpClient);
  private apiUrl = 'http://localhost:3000';

  getAllPosts(): Observable<any> {
    return this.http.get(`${this.apiUrl}/posts`);
  }

  getPostById(id: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/posts/${id}`);
  }

  createPost(data: PostData): Observable<any> {
    return this.http.post(`${this.apiUrl}/posts`, data, {
      withCredentials: true,
    });
  }

  editPost(id: string, data: PostData): Observable<any> {
    return this.http.put(`${this.apiUrl}/posts/${id}`, data, {
      withCredentials: true,
    });
  }

  deletePost(id: string): Observable<any> {
    return this.http.delete(`${this.apiUrl}/posts/${id}`, {
      withCredentials: true,
    });
  }

  uploadImage(file: File): Observable<any> {
    const formData = new FormData();
    formData.append('image', file);

    return this.http.post(`${this.apiUrl}/posts/upload`, formData, {
      withCredentials: true,
    });
  }

  getAllCategories(): Observable<any> {
    return this.http.get(`${this.apiUrl}/categories`);
  }

  createCategory(data: CategoryData): Observable<any> {
    return this.http.post(`${this.apiUrl}/categories`, data, {
      withCredentials: true,
    });
  }

  updateCategory(id: string, data: CategoryData): Observable<any> {
    return this.http.put(`${this.apiUrl}/categories/${id}`, data, {
      withCredentials: true,
    });
  }

  deleteCategory(id: string): Observable<any> {
    return this.http.delete(`${this.apiUrl}/categories/${id}`, {
      withCredentials: true,
    });
  }

  // Post-Category relationship methods
  getPostCategories(postId: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/posts/${postId}/categories`);
  }

  addCategoryToPost(postId: string, categoryId: string): Observable<any> {
    return this.http.post(
      `${this.apiUrl}/posts/${postId}/categories/${categoryId}`,
      {},
      { withCredentials: true }
    );
  }

  removeCategoryFromPost(postId: string, categoryId: string): Observable<any> {
    return this.http.delete(
      `${this.apiUrl}/posts/${postId}/categories/${categoryId}`,
      { withCredentials: true }
    );
  }
}

================
File: src/app/app.component.html
================
<div class="min-h-screen flex flex-col">
  <nav class="border-b-2 border-blue-500">
    <div class="container mx-auto flex justify-between items-center">
      <div class="text-xl font-bold">
        <a routerLink="/" class="hover:text-blue-500">
          <img
            src="assets/images/logo.png"
            alt="Site's logo"
            class="w-32 h-full"
          />
        </a>
      </div>
      <div class="flex gap-4">
        @if (isAuthenticated$ | async) {
        <a
          routerLink="/dashboard"
          class="text-blue-600 hover:text-black text-xl duration-300 transition-all"
          >Dashboard</a
        >
        <button
          (click)="logout()"
          class="text-blue-600 hover:text-black text-xl duration-300 transition-all"
        >
          Logout
        </button>
        } @else {
        <a
          routerLink="/login"
          class="text-blue-600 hover:text-black text-xl duration-300 transition-all"
          >Login</a
        >
        }
      </div>
    </div>
  </nav>

  <main class="flex-grow container mx-auto p-4">
    <router-outlet></router-outlet>
  </main>

  <footer class="border-t-2 border-gray-800 py-5">
    <div class="container mx-auto text-center">
      Copyright &copy; {{ year }} -
      <a href="https://github.com/EsFrost" target="_blank">Sigmung Frost</a>
    </div>
  </footer>
</div>
<app-back-to-top></app-back-to-top>

================
File: src/app/app.component.spec.ts
================
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'generic-blog' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('generic-blog');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, generic-blog');
  });
});

================
File: src/app/app.component.ts
================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  RouterLink,
  RouterOutlet,
  NavigationEnd,
  Router,
} from '@angular/router';
import { AuthService } from './services/auth.service';
import { inject } from '@angular/core';
import { BackToTopComponent } from './components/back-to-the-top/back-to-the-top';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterLink, RouterOutlet, CommonModule, BackToTopComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  title = 'generic-blog';
  private authService = inject(AuthService);
  private router = inject(Router);
  isAuthenticated$ = this.authService.isAuthenticated$;
  year: number = new Date().getFullYear();

  constructor() {}

  logout() {
    this.authService.logout().subscribe({
      next: () => {
        this.router.navigate(['/']);
      },
      error: (err) => {
        console.error('Logout failed:', err);
      },
    });
  }
}

================
File: src/app/app.config.ts
================
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';

import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideHttpClient(),
  ],
};

================
File: src/app/app.routes.ts
================
import { Routes } from '@angular/router';
import { PostsComponent } from './components/posts/posts.component';
import { PostComponent } from './components/post/post.component';
import { LoginComponent } from './components/login/login.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { EditPostComponent } from './components/edit-post/edit-post.component';
import { NewPostComponent } from './components/new-post/new-post.component';
import { AuthGuard } from './auth.guard';

export const routes: Routes = [
  {
    path: 'posts',
    component: PostsComponent,
  },
  {
    path: 'post/:id',
    component: PostComponent,
  },
  {
    path: 'login',
    component: LoginComponent,
  },
  {
    path: 'dashboard',
    component: DashboardComponent,
    canActivate: [AuthGuard],
  },
  {
    path: 'posts/edit/:id',
    component: EditPostComponent,
    canActivate: [AuthGuard],
  },
  {
    path: 'posts/new',
    component: NewPostComponent,
    canActivate: [AuthGuard],
  },
  {
    path: '',
    redirectTo: 'posts',
    pathMatch: 'full',
  },
];

================
File: src/app/auth.guard.spec.ts
================
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing'; // Add this to provide routing modules
import { AuthGuard } from './auth.guard'; // Correct import for the guard
import { AuthService } from './services/auth.service'; // Import the AuthService
import { Router } from '@angular/router';
import { of } from 'rxjs'; // for mocking observable

describe('AuthGuard', () => {
  let authGuard: AuthGuard;
  let authService: AuthService;
  let router: Router;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [RouterTestingModule], // Add this to test router
      providers: [AuthGuard, AuthService],
    });

    authGuard = TestBed.inject(AuthGuard);
    authService = TestBed.inject(AuthService);
    router = TestBed.inject(Router);
  });

  it('should be created', () => {
    expect(authGuard).toBeTruthy();
  });

  it('should allow activation if authenticated', () => {
    spyOn(authService.isAuthenticated$, 'pipe').and.returnValue(of(true)); // Mocking AuthService response

    authGuard.canActivate().subscribe((result) => {
      expect(result).toBeTrue(); // It should allow access
    });
  });

  it('should block activation and navigate to login if not authenticated', () => {
    spyOn(authService.isAuthenticated$, 'pipe').and.returnValue(of(false)); // Mocking AuthService response
    spyOn(router, 'navigate'); // Spy on the router.navigate method

    authGuard.canActivate().subscribe((result) => {
      expect(result).toBeFalse(); // It should block access
      expect(router.navigate).toHaveBeenCalledWith(['/login']); // It should navigate to login
    });
  });
});

================
File: src/app/auth.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from './services/auth.service';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.isAuthenticated$.pipe(
      map((isAuthenticated) => {
        if (!isAuthenticated) {
          this.router.navigate(['/login']); // Redirect to login if not authenticated
          return false;
        }
        return true;
      })
    );
  }
}

================
File: src/app/components/back-to-the-top/back-to-the-top.css
================
/* src/app/components/back-to-top/back-to-top.component.css */
button {
  animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 0.9;
    transform: translateY(0);
  }
}

================
File: src/app/components/back-to-the-top/back-to-the-top.html
================
<!-- src/app/components/back-to-top/back-to-top.component.html -->
<button
  *ngIf="showButton"
  (click)="scrollToTop()"
  class="fixed bottom-6 right-6 border-2 border-blue-600 bg-white hover:bg-blue-100 text-blue-600 p-3 rounded-full shadow-lg transition-all duration-300 opacity-90 hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-blue-600 z-50"
  aria-label="Back to top"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M5 10l7-7m0 0l7 7m-7-7v18"
    />
  </svg>
</button>

================
File: src/app/components/back-to-the-top/back-to-the-top.ts
================
import { Component, HostListener, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DOCUMENT } from '@angular/common';

@Component({
  selector: 'app-back-to-top',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './back-to-the-top.html',
  styleUrls: ['./back-to-the-top.css'],
})
export class BackToTopComponent {
  private document = inject(DOCUMENT);
  showButton = false;
  private scrollThreshold = 50; // Show button after 400px of scroll

  @HostListener('window:scroll')
  onWindowScroll() {
    this.showButton = window.scrollY > this.scrollThreshold;
  }

  scrollToTop() {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  }
}

================
File: src/app/components/create-category-dialog/craete-category-dialog.component.ts
================
import { Component, EventEmitter, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ApiService } from '../../api/api.service';

@Component({
  selector: 'app-create-category-dialog',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './create-category-dialog.component.html',
})
export class CreateCategoryDialogComponent {
  @Output() closeDialog = new EventEmitter<boolean>();

  categoryName: string = '';
  error: string = '';
  isSubmitting: boolean = false;

  constructor(private apiService: ApiService) {}

  onSubmit() {
    if (!this.categoryName.trim()) {
      this.error = 'Category name is required';
      return;
    }

    this.isSubmitting = true;
    this.apiService.createCategory({ name: this.categoryName }).subscribe({
      next: () => {
        this.closeDialog.emit(true); // true indicates successful creation
      },
      error: (err) => {
        this.error = err.error.error || 'Failed to create category';
        this.isSubmitting = false;
      },
    });
  }

  close() {
    this.closeDialog.emit(false); // false indicates cancelled
  }
}

================
File: src/app/components/create-category-dialog/create-category-dialog.component.html
================
<div
  class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
>
  <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-bold">Create New Category</h2>
      <button
        (click)="close()"
        class="text-gray-500 hover:text-gray-700"
        aria-label="Close dialog"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>

    <form (ngSubmit)="onSubmit()" class="space-y-4">
      <div>
        <label
          for="categoryName"
          class="block text-sm font-medium text-gray-700"
          >Category Name</label
        >
        <input
          type="text"
          id="categoryName"
          [(ngModel)]="categoryName"
          name="categoryName"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          [class.border-red-500]="error"
          placeholder="Enter category name"
          [disabled]="isSubmitting"
        />
        @if (error) {
        <p class="mt-1 text-sm text-red-600">{{ error }}</p>
        }
      </div>

      <div class="flex justify-end space-x-3">
        <button
          type="button"
          (click)="close()"
          class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          [disabled]="isSubmitting"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          [disabled]="isSubmitting"
        >
          {{ isSubmitting ? "Creating..." : "Create Category" }}
        </button>
      </div>
    </form>
  </div>
</div>

================
File: src/app/components/dashboard/dashboard.component.html
================
<div class="container mx-auto p-4">
  <!-- Add New Post Button -->
  <!-- Notification -->
  @if (notification) {
  <div
    class="fixed top-4 right-4 p-4 rounded-lg shadow-lg max-w-md transition-all duration-300 z-50"
    [class.bg-green-500]="notification.type === 'success'"
    [class.bg-red-500]="notification.type === 'error'"
    role="alert"
  >
    <div class="flex items-center text-white">
      <!-- Success Icon -->
      @if (notification.type === 'success') {
      <svg
        class="w-6 h-6 mr-2"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 13l4 4L19 7"
        ></path>
      </svg>
      }
      <!-- Error Icon -->
      @if (notification.type === 'error') {
      <svg
        class="w-6 h-6 mr-2"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"
        ></path>
      </svg>
      }
      <span class="text-white">{{ notification.message }}</span>
    </div>
  </div>
  }

  <div class="flex justify-end mb-6 gap-x-4">
    <!-- View Toggle -->

    <div class="flex space-x-4">
      <button
        (click)="setActiveView('posts')"
        class="px-4 py-2 rounded-lg transition-colors"
        [class.bg-blue-500]="activeView === 'posts'"
        [class.text-white]="activeView === 'posts'"
        [class.bg-gray-100]="activeView !== 'posts'"
      >
        Posts
      </button>
      <button
        (click)="setActiveView('categories')"
        class="px-4 py-2 rounded-lg transition-colors"
        [class.bg-blue-500]="activeView === 'categories'"
        [class.text-white]="activeView === 'categories'"
        [class.bg-gray-100]="activeView !== 'categories'"
      >
        Categories
      </button>
    </div>

    @if (activeView === 'categories') {
    <button
      (click)="onCreateCategoryClick()"
      class="inline-flex items-center justify-center p-4 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 4v16m8-8H4"
        />
      </svg>
      <span class="ml-2">New Category</span>
    </button>
    } @if (activeView === 'posts') {
    <a
      routerLink="/posts/new"
      class="inline-flex items-center justify-center p-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 4v16m8-8H4"
        />
      </svg>
      <span class="ml-2">New Post</span>
    </a>
    }
  </div>

  @if (activeView === 'posts') {
  <!-- Posts Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    @for (post of posts$ | async; track post.id) {
    <div class="bg-white rounded shadow p-4 relative hover:shadow-md">
      <!-- Delete Button -->
      <!-- Post Content -->
      <a [routerLink]="['/posts/edit', post.id]" class="block">
        <div class="flex gap-x-4 mb-4 justify-between items-center">
          <img src="{{ post.image_url }}" alt="" class="w-20 h-20" />
          <h2 class="text-lg font-bold mb-2 pr-6">{{ post.title }}</h2>
          <button
            (click)="deletePost(post.id)"
            class="text-gray-500 hover:text-red-500"
            title="Delete post"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              class="w-5 h-5"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
              />
            </svg>
          </button>
        </div>

        <p class="text-gray-600 text-sm mb-2">{{ post.content }}</p>
        <div class="text-xs text-gray-500">
          {{ post.created_at | date }}
        </div>
      </a>
    </div>
    } @empty {
    <div class="text-center text-gray-500 py-8">
      No posts found. Click the + button to create your first post.
    </div>
    }
  </div>
  } @else {
  <!-- Categories Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    @for (category of categories$ | async; track category.id) {
    <div class="bg-white rounded shadow p-4 relative hover:shadow-md">
      <div class="flex justify-between items-center">
        <h2 class="text-lg font-bold">{{ category.name }}</h2>
        <div class="flex space-x-2">
          <button
            (click)="onEditCategory(category)"
            class="text-gray-500 hover:text-blue-500"
            title="Edit category"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
              />
            </svg>
          </button>
          <button
            (click)="deleteCategory(category.id)"
            class="text-gray-500 hover:text-red-500"
            title="Delete category"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
              />
            </svg>
          </button>
        </div>
      </div>
    </div>
    } @empty {
    <div class="text-center text-gray-500 py-8 col-span-full">
      No categories found. Click the + button to create your first category.
    </div>
    }
  </div>
  }
  <!-- Category Dialog -->
  @if (showCreateCategoryDialog) {
  <app-create-category-dialog
    (closeDialog)="handleCreateCategoryClose($event)"
  />
  }
</div>
@if (showEditCategoryDialog) {
<app-edit-category-dialog
  [category]="selectedCategory"
  (closeDialog)="handleEditCategoryClose($event)"
/>
}

================
File: src/app/components/dashboard/dashboard.component.ts
================
import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink, Router } from '@angular/router';
import { ApiService } from '../../api/api.service';
import { CreateCategoryDialogComponent } from '../create-category-dialog/craete-category-dialog.component';
import { EditCategoryDialogComponent } from '../edit-category-dialog/edit-category-dialog.component';

interface Notification {
  message: string;
  type: 'success' | 'error';
}

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [
    CommonModule,
    RouterLink,
    CreateCategoryDialogComponent,
    EditCategoryDialogComponent,
  ],
  templateUrl: './dashboard.component.html',
})
export class DashboardComponent {
  private apiService = inject(ApiService);
  posts$ = this.apiService.getAllPosts();
  private router = inject(Router);
  categories$ = this.apiService.getAllCategories();
  showCreateCategoryDialog = false;
  notification: Notification | null = null;
  activeView: 'posts' | 'categories' = 'posts';
  showEditCategoryDialog = false;
  selectedCategory: { id: string; name: string } | null = null;

  deletePost(id: string) {
    if (confirm('Are you sure you want to delete this post?')) {
      this.apiService.deletePost(id).subscribe({
        next: () => {
          this.router.navigate(['/dashboard']);
        },
        error: (error) => {
          console.error('Error deleting post:', error);
          alert('Failed to delete post. Please try again.');
        },
      });
    }
  }

  onCreateCategoryClick() {
    this.showCreateCategoryDialog = true;
  }

  handleCreateCategoryClose(success: boolean) {
    this.showCreateCategoryDialog = false;
    if (success) {
      this.showNotification({
        message: 'Category created successfully!',
        type: 'success',
      });
    } else {
      this.showNotification({
        message: 'Failed to create category. Please try again.',
        type: 'error',
      });
    }
  }

  private showNotification(notification: Notification) {
    this.notification = notification;
    // Auto-hide notification after 3 seconds
    setTimeout(() => {
      this.notification = null;
    }, 3000);
  }

  setActiveView(view: 'posts' | 'categories') {
    this.activeView = view;
  }

  deleteCategory(id: string) {
    if (confirm('Are you sure you want to delete this category?')) {
      this.apiService.deleteCategory(id).subscribe({
        next: () => {
          this.showNotification({
            message: 'Category deleted successfully!',
            type: 'success',
          });
          this.categories$ = this.apiService.getAllCategories();
        },
        error: (error) => {
          console.error('Error deleting category:', error);
          this.showNotification({
            message: 'Failed to delete category. Please try again.',
            type: 'error',
          });
        },
      });
    }
  }

  onEditCategory(category: { id: string; name: string }) {
    this.selectedCategory = category;
    this.showEditCategoryDialog = true;
  }

  handleEditCategoryClose(success: boolean) {
    this.showEditCategoryDialog = false;
    this.selectedCategory = null;
    if (success) {
      this.showNotification({
        message: 'Category updated successfully!',
        type: 'success',
      });
      this.categories$ = this.apiService.getAllCategories();
    }
  }
}

================
File: src/app/components/edit-category-dialog/edit-category-dialog.component.html
================
<div
  class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
>
  <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-bold">Edit Category</h2>
      <button
        (click)="close()"
        class="text-gray-500 hover:text-gray-700"
        aria-label="Close dialog"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>

    <form (ngSubmit)="onSubmit()" class="space-y-4">
      <div>
        <label
          for="categoryName"
          class="block text-sm font-medium text-gray-700"
          >Category Name</label
        >
        <input
          type="text"
          id="categoryName"
          [(ngModel)]="categoryName"
          name="categoryName"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          [class.border-red-500]="error"
          placeholder="Enter category name"
          [disabled]="isSubmitting"
        />
        @if (error) {
        <p class="mt-1 text-sm text-red-600">{{ error }}</p>
        }
      </div>

      <div class="flex justify-end space-x-3">
        <button
          type="button"
          (click)="close()"
          class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          [disabled]="isSubmitting"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          [disabled]="isSubmitting"
        >
          {{ isSubmitting ? "Saving..." : "Save Changes" }}
        </button>
      </div>
    </form>
  </div>
</div>

================
File: src/app/components/edit-category-dialog/edit-category-dialog.component.ts
================
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ApiService } from '../../api/api.service';

@Component({
  selector: 'app-edit-category-dialog',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './edit-category-dialog.component.html',
})
export class EditCategoryDialogComponent {
  @Input() category: { id: string; name: string } | null = null;
  @Output() closeDialog = new EventEmitter<boolean>();

  categoryName: string = '';
  error: string = '';
  isSubmitting: boolean = false;

  constructor(private apiService: ApiService) {}

  ngOnInit() {
    if (this.category) {
      this.categoryName = this.category.name;
    }
  }

  onSubmit() {
    if (!this.categoryName.trim()) {
      this.error = 'Category name is required';
      return;
    }

    if (!this.category) {
      this.error = 'Category not found';
      return;
    }

    this.isSubmitting = true;
    this.apiService
      .updateCategory(this.category.id, { name: this.categoryName })
      .subscribe({
        next: () => {
          this.closeDialog.emit(true);
        },
        error: (err) => {
          this.error = err.error.error || 'Failed to update category';
          this.isSubmitting = false;
        },
      });
  }

  close() {
    this.closeDialog.emit(false);
  }
}

================
File: src/app/components/edit-post/edit-post.component.html
================
<div class="container mx-auto p-4">
  <div class="max-w-4xl mx-auto">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Edit Post</h1>
      <div class="space-x-4">
        <button
          (click)="deletePost()"
          class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
        >
          Delete
        </button>
        <button
          (click)="savePost()"
          class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Save
        </button>
      </div>
    </div>

    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Title</label
        >
        <input
          type="text"
          [(ngModel)]="title"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Post title"
        />
      </div>

      <!-- Categories Section -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2"
          >Categories</label
        >
        <div class="grid grid-cols-2 md:grid-cols-3 gap-2">
          @for (category of categories; track category.id) {
          <div class="flex items-center space-x-2">
            <input
              type="checkbox"
              [id]="'category-' + category.id"
              [checked]="isCategorySelected(category.id)"
              (change)="onCategoryToggle(category.id)"
              class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <label
              [for]="'category-' + category.id"
              class="text-sm text-gray-700"
            >
              {{ category.name }}
            </label>
          </div>
          }
        </div>
        @if (categories.length === 0) {
        <p class="text-sm text-gray-500 mt-2">No categories available</p>
        }
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Image URL</label
        >
        <div class="flex gap-2">
          <input
            type="text"
            [(ngModel)]="imageUrl"
            (ngModelChange)="updatePreviewUrl()"
            class="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Image URL"
          />
          <button
            *ngIf="imageUrl"
            (click)="clearImage()"
            class="px-3 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
          >
            Clear
          </button>
        </div>

        <!-- Image Preview -->
        <div *ngIf="imageUrl" class="mt-2">
          <img
            [src]="previewUrl"
            alt="Post image"
            class="max-h-48 rounded shadow"
            (error)="handleImageError()"
          />
        </div>
        <p *ngIf="imageError" class="mt-1 text-sm text-red-500">
          Error loading image. Please check the URL.
        </p>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Content</label
        >
        <editor
          [(ngModel)]="content"
          [init]="tinymceInit"
          class="mt-1 min-h-[400px]"
        ></editor>
      </div>
    </div>
  </div>
</div>

================
File: src/app/components/edit-post/edit-post.component.ts
================
import { Component, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { TINYMCE_SCRIPT_SRC, EditorComponent } from '@tinymce/tinymce-angular';
import { ApiService } from '../../api/api.service';
import { Category } from '../../utils/interfaces';
import { forkJoin, Observable } from 'rxjs';

@Component({
  selector: 'app-edit-post',
  standalone: true,
  imports: [CommonModule, FormsModule, EditorComponent],
  providers: [
    { provide: TINYMCE_SCRIPT_SRC, useValue: 'tinymce/tinymce.min.js' },
  ],
  templateUrl: './edit-post.component.html',
})
export class EditPostComponent implements OnInit {
  private apiService = inject(ApiService);
  private route = inject(ActivatedRoute);
  private router = inject(Router);

  postId: string = '';
  title: string = '';
  content: string = '';
  imageUrl: string = '';
  imageError: boolean = false;
  previewUrl: string = '';
  categories: Category[] = [];
  selectedCategoryIds: Set<string> = new Set<string>();

  tinymceInit: EditorComponent['init'] = {
    plugins: [
      'advlist',
      'autolink',
      'lists',
      'link',
      'image',
      'charmap',
      'preview',
      'anchor',
      'searchreplace',
      'visualblocks',
      'code',
      'fullscreen',
      'insertdatetime',
      'media',
      'table',
      'code',
      'help',
      'wordcount',
    ],
    toolbar:
      'undo redo | blocks | ' +
      'bold italic forecolor | alignleft aligncenter ' +
      'alignright alignjustify | bullist numlist outdent indent | ' +
      'removeformat | help',
    base_url: '/tinymce',
    suffix: '.min',
    height: 500,
    menubar: false,
    promotion: false,
    skin: 'oxide',
    content_style:
      'body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: 14px; }',
  };

  ngOnInit() {
    this.postId = this.route.snapshot.params['id'];
    if (this.postId) {
      this.loadData();
    }
  }

  private loadData() {
    // Load both post data and categories in parallel
    forkJoin({
      post: this.apiService.getPostById(this.postId),
      categories: this.apiService.getAllCategories(),
      postCategories: this.apiService.getPostCategories(this.postId),
    }).subscribe({
      next: (data) => {
        // Set post data
        this.title = data.post.title;
        this.content = data.post.content;
        this.imageUrl = data.post.image_url || '';
        this.updatePreviewUrl();

        // Set categories
        this.categories = data.categories;

        // Set selected categories
        this.selectedCategoryIds = new Set(
          data.postCategories.map((cat: Category) => cat.id)
        );
      },
      error: (error) => {
        console.error('Error loading data:', error);
        this.router.navigate(['/dashboard']);
      },
    });
  }

  updatePreviewUrl() {
    this.previewUrl = this.imageUrl;
  }

  clearImage() {
    this.imageUrl = '';
    this.previewUrl = '';
    this.imageError = false;
  }

  handleImageError() {
    this.imageError = true;
  }

  onCategoryToggle(categoryId: string) {
    if (this.selectedCategoryIds.has(categoryId)) {
      this.selectedCategoryIds.delete(categoryId);
    } else {
      this.selectedCategoryIds.add(categoryId);
    }
  }

  isCategorySelected(categoryId: string): boolean {
    return this.selectedCategoryIds.has(categoryId);
  }

  savePost() {
    if (!this.title.trim() || !this.content.trim()) {
      alert('Please fill in both title and content');
      return;
    }

    // First update the post details
    this.apiService
      .editPost(this.postId, {
        title: this.title,
        content: this.content,
        image_url: this.imageUrl,
      })
      .subscribe({
        next: () => {
          // After post is updated, handle categories
          this.updateCategories();
        },
        error: (error) => {
          console.error('Error saving post:', error);
          alert('Failed to save post. Please try again.');
        },
      });
  }

  private updateCategories() {
    // Get current categories for comparison
    this.apiService.getPostCategories(this.postId).subscribe({
      next: (currentCategories: Category[]) => {
        const currentCategoryIds = new Set(
          currentCategories.map((cat) => cat.id)
        );
        const selectedCategoryIds = this.selectedCategoryIds;

        const categoriesToAdd = Array.from(selectedCategoryIds).filter(
          (id) => !currentCategoryIds.has(id)
        );
        const categoriesToRemove = Array.from(currentCategoryIds).filter(
          (id) => !selectedCategoryIds.has(id)
        );

        const operations: Array<any> = [];

        // Add new categories
        for (const categoryId of categoriesToAdd) {
          operations.push(
            this.apiService.addCategoryToPost(this.postId, categoryId)
          );
        }

        // Remove unselected categories
        for (const categoryId of categoriesToRemove) {
          operations.push(
            this.apiService.removeCategoryFromPost(this.postId, categoryId)
          );
        }

        if (operations.length > 0) {
          // Convert array of operations into an object for forkJoin
          const operationsObj = operations.reduce((acc, operation, index) => {
            acc[`operation${index}`] = operation;
            return acc;
          }, {} as { [key: string]: Observable<any> });

          forkJoin(operationsObj).subscribe({
            next: () => this.router.navigate(['/dashboard']),
            error: (error) => {
              console.error('Error updating categories:', error);
              alert('Post saved but there was an error updating categories.');
              this.router.navigate(['/dashboard']);
            },
          });
        } else {
          this.router.navigate(['/dashboard']);
        }
      },
      error: (error) => {
        console.error('Error getting current categories:', error);
        this.router.navigate(['/dashboard']);
      },
    });
  }

  deletePost() {
    if (confirm('Are you sure you want to delete this post?')) {
      this.apiService.deletePost(this.postId).subscribe({
        next: () => {
          this.router.navigate(['/dashboard']);
        },
        error: (error) => {
          console.error('Error deleting post:', error);
          alert('Failed to delete post. Please try again.');
        },
      });
    }
  }
}

================
File: src/app/components/login/login.component.html
================
<div class="min-h-screen flex items-center justify-center">
  <div class="max-w-md w-full p-6 bg-white rounded-lg shadow-lg">
    <h2 class="text-2xl font-bold text-center text-gray-800 mb-6">Login</h2>
    <form (ngSubmit)="onSubmit()" class="space-y-4">
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2" for="email">
          Email
        </label>
        <input
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
          id="email"
          type="email"
          [(ngModel)]="email"
          name="email"
          required
        />
      </div>
      <div>
        <label
          class="block text-gray-700 text-sm font-bold mb-2"
          for="password"
        >
          Password
        </label>
        <input
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
          id="password"
          type="password"
          [(ngModel)]="password"
          name="password"
          required
        />
      </div>
      @if (error) {
      <div class="text-red-500 text-sm">{{ error }}</div>
      }
      <button
        type="submit"
        class="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
      >
        Login
      </button>
    </form>
  </div>
</div>

================
File: src/app/components/login/login.component.ts
================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { inject } from '@angular/core';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './login.component.html',
})
export class LoginComponent {
  email: string = '';
  password: string = '';
  error: string = '';

  private authService = inject(AuthService);
  private router = inject(Router);

  onSubmit() {
    if (!this.email || !this.password) {
      this.error = 'Please enter both email and password';
      return;
    }

    this.authService.login(this.email, this.password).subscribe({
      next: () => {
        this.router.navigate(['/dashboard']);
      },
      error: (err) => {
        this.error = err.error.error || 'Login failed';
      },
    });
  }
}

================
File: src/app/components/new-post/new-post.component.html
================
<div class="container mx-auto p-4">
  <div class="max-w-4xl mx-auto">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">New Post</h1>
      <button
        (click)="savePost()"
        class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Save
      </button>
    </div>

    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Title</label
        >
        <input
          type="text"
          [(ngModel)]="title"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Post title"
        />
      </div>

      <!-- Categories Section -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2"
          >Categories</label
        >
        <div class="grid grid-cols-2 md:grid-cols-3 gap-2">
          @for (category of categories; track category.id) {
          <div class="flex items-center space-x-2">
            <input
              type="checkbox"
              [id]="'category-' + category.id"
              [checked]="isCategorySelected(category.id)"
              (change)="onCategoryToggle(category.id)"
              class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <label
              [for]="'category-' + category.id"
              class="text-sm text-gray-700"
            >
              {{ category.name }}
            </label>
          </div>
          }
        </div>
        @if (categories.length === 0) {
        <p class="text-sm text-gray-500 mt-2">No categories available</p>
        }
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Image URL</label
        >
        <div class="flex gap-2">
          <input
            type="text"
            [(ngModel)]="imageUrl"
            (ngModelChange)="updatePreviewUrl()"
            class="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Image URL"
          />
          <button
            *ngIf="imageUrl"
            (click)="clearImage()"
            class="px-3 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
          >
            Clear
          </button>
        </div>

        <!-- Image Preview -->
        <div *ngIf="imageUrl" class="mt-2">
          <img
            [src]="previewUrl"
            alt="Post image"
            class="max-h-48 rounded shadow"
            (error)="handleImageError()"
          />
        </div>
        <p *ngIf="imageError" class="mt-1 text-sm text-red-500">
          Error loading image. Please check the URL.
        </p>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Content</label
        >
        <editor
          [(ngModel)]="content"
          [init]="tinymceInit"
          class="mt-1 min-h-[400px]"
        ></editor>
      </div>
    </div>
  </div>
</div>

================
File: src/app/components/new-post/new-post.component.ts
================
import { Component, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { TINYMCE_SCRIPT_SRC, EditorComponent } from '@tinymce/tinymce-angular';
import { ApiService } from '../../api/api.service';
import { Category } from '../../utils/interfaces';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-new-post',
  standalone: true,
  imports: [CommonModule, FormsModule, EditorComponent],
  providers: [
    { provide: TINYMCE_SCRIPT_SRC, useValue: '/tinymce/tinymce.min.js' },
  ],
  templateUrl: './new-post.component.html',
})
export class NewPostComponent implements OnInit {
  private apiService = inject(ApiService);
  private router = inject(Router);

  title: string = '';
  content: string = '';
  imageUrl: string = '';
  imageError: boolean = false;
  previewUrl: string = '';
  categories: Category[] = [];
  selectedCategoryIds: Set<string> = new Set<string>();

  tinymceInit: EditorComponent['init'] = {
    plugins: [
      'advlist',
      'autolink',
      'lists',
      'link',
      'image',
      'charmap',
      'preview',
      'anchor',
      'searchreplace',
      'visualblocks',
      'code',
      'fullscreen',
      'insertdatetime',
      'media',
      'table',
      'code',
      'help',
      'wordcount',
    ],
    toolbar:
      'undo redo | blocks | ' +
      'bold italic forecolor | alignleft aligncenter ' +
      'alignright alignjustify | bullist numlist outdent indent | ' +
      'removeformat | help',
    base_url: '/tinymce',
    suffix: '.min',
    height: 500,
    menubar: false,
    promotion: false,
    skin: 'oxide',
    content_style:
      'body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: 14px; }',
  };

  ngOnInit() {
    this.loadCategories();
  }

  loadCategories() {
    this.apiService.getAllCategories().subscribe({
      next: (categories) => {
        this.categories = categories;
      },
      error: (error) => {
        console.error('Error loading categories:', error);
      },
    });
  }

  updatePreviewUrl() {
    this.previewUrl = this.imageUrl;
  }

  clearImage() {
    this.imageUrl = '';
    this.previewUrl = '';
    this.imageError = false;
  }

  handleImageError() {
    this.imageError = true;
  }

  onCategoryToggle(categoryId: string) {
    if (this.selectedCategoryIds.has(categoryId)) {
      this.selectedCategoryIds.delete(categoryId);
    } else {
      this.selectedCategoryIds.add(categoryId);
    }
  }

  isCategorySelected(categoryId: string): boolean {
    return this.selectedCategoryIds.has(categoryId);
  }

  savePost() {
    if (!this.title.trim() || !this.content.trim()) {
      alert('Please fill in both title and content');
      return;
    }

    this.apiService
      .createPost({
        title: this.title,
        content: this.content,
        image_url: this.imageUrl,
      })
      .subscribe({
        next: (response) => {
          // Log the response to verify its structure
          console.log('Create post response:', response);

          // Extract the created post's ID
          const postId = response.id || response.postId;
          if (postId) {
            this.addCategoriesToPost(postId);
          } else {
            console.error('No post ID received from the server');
            alert(
              'Post created but categories could not be added. Please try adding them later.'
            );
            this.router.navigate(['/dashboard']);
          }
        },
        error: (error) => {
          console.error('Error creating post:', error);
          alert('Failed to create post. Please try again.');
        },
      });
  }

  private addCategoriesToPost(postId: string) {
    if (this.selectedCategoryIds.size === 0) {
      this.router.navigate(['/dashboard']);
      return;
    }

    // Process categories sequentially instead of in parallel
    const addCategory = (categoryIds: string[]): void => {
      if (categoryIds.length === 0) {
        this.router.navigate(['/dashboard']);
        return;
      }

      const categoryId = categoryIds[0];
      const remainingCategories = categoryIds.slice(1);

      this.apiService.addCategoryToPost(postId, categoryId).subscribe({
        next: () => {
          addCategory(remainingCategories);
        },
        error: (error) => {
          console.error('Error adding category:', error);
          alert('Some categories may not have been added successfully.');
          this.router.navigate(['/dashboard']);
        },
      });
    };

    addCategory(Array.from(this.selectedCategoryIds));
  }
}

================
File: src/app/components/post/post.component.css
================
.postContent {
  @apply prose; /* Tailwind typography */
}

================
File: src/app/components/post/post.component.html
================
<div class="p-4">
  @if (post$ | async; as post) {
  <article class="mb-4 p-4 border rounded-shadow">
    <h2 class="text-xl font-bold">{{ post.title }}</h2>
    <div class="text-gray-600 mb-2">
      <time>{{ post.created_at | date : "medium" }}</time>
    </div>

    <img
      class="w-full h-auto object-cover rounded"
      [src]="imageUrl"
      [alt]="post.title"
    />

    <div
      class="prose max-w-none mt-8 postContent"
      [innerHTML]="sanitizeContent(post.content)"
    ></div>
  </article>
  } @else {
  <div class="text-center text-gray-500">Oops, something went wrong...</div>
  }
</div>

================
File: src/app/components/post/post.component.ts
================
import { ApiService } from '../../api/api.service';
import { Component, inject } from '@angular/core';
import { AsyncPipe, DatePipe } from '@angular/common';
import { ActivatedRoute, Params } from '@angular/router';
import { map, switchMap } from 'rxjs/operators';
import { DomSanitizer, SafeHtml, SafeUrl } from '@angular/platform-browser';

@Component({
  selector: 'app-post',
  standalone: true,
  imports: [AsyncPipe, DatePipe],
  templateUrl: './post.component.html',
  styleUrls: ['./post.component.css'],
})
export class PostComponent {
  private apiService = inject(ApiService);
  private route = inject(ActivatedRoute);
  private sanitizer = inject(DomSanitizer);

  post$ = this.route.params.pipe(
    map((params: Params) => params['id']),
    switchMap((id: string) => this.apiService.getPostById(id))
  );

  imageUrl: SafeUrl = '';

  ngOnInit() {
    this.post$.subscribe((post) => {
      if (post.image_url) {
        this.imageUrl = this.sanitizer.bypassSecurityTrustUrl(post.image_url);
      }
    });
  }

  sanitizeContent(content: string): SafeHtml {
    return this.sanitizer.bypassSecurityTrustHtml(content);
  }
}

================
File: src/app/components/posts/posts.component.html
================
<div class="p-4">
  <div
    class="flex flex-col items-center md:grid md:grid-cols-2 lg:grid-cols-3 gap-8"
  >
    @for (post of data$ | async; track post.id; let i = $index) {
    <div
      [ngClass]="getGridArea(i)"
      class="bg-white rounded-lg shadow-md overflow-hidden cursor-pointer hover:shadow-lg transition-shadow duration-200 h-64"
      (click)="navigateToPost(post.id)"
    >
      <div class="p-4 flex flex-col justify-around h-full">
        <h2 class="text-xl font-bold">{{ post.title }}</h2>
        <div class="flex mt-2 gap-x-4 items-center">
          <img
            *ngIf="post.image_url"
            [src]="post.image_url"
            alt=""
            class="min-w-20 h-20 rounded-md object-cover"
          />
          <p class="mt-2 text-gray-600 line-clamp-3">
            {{ getPreview(post.content) }}
          </p>
        </div>
      </div>
    </div>
    } @empty {
    <div class="text-center text-gray-500">No posts found...</div>
    }
  </div>
</div>

================
File: src/app/components/posts/posts.component.ts
================
import { ApiService } from '../../api/api.service';
import { Component, inject } from '@angular/core';
import { AsyncPipe, NgClass, NgIf } from '@angular/common';
import { Router } from '@angular/router';

@Component({
  selector: 'app-posts',
  standalone: true,
  imports: [AsyncPipe, NgClass, NgIf],
  templateUrl: './posts.component.html',
})
export class PostsComponent {
  private apiService = inject(ApiService);
  private router = inject(Router);
  data$ = this.apiService.getAllPosts();

  getGridArea(index: number): string {
    const row = Math.floor(index / 3);
    const positionInRow = index % 3;

    if (row % 2 === 0) {
      // Even rows (0, 2, 4...)
      if (positionInRow === 0) return 'lg:col-span-1';
      if (positionInRow === 1) return 'lg:col-span-2';
    } else {
      // Odd rows (1, 3, 5...)
      if (positionInRow === 0) return 'lg:col-span-2';
      if (positionInRow === 1) return 'lg:col-span-1';
    }
    return 'lg:col-span-3';
  }

  getPreview(content: string): string {
    const plainText = content.replace(/<[^>]*>/g, ''); // remove html tags
    return plainText.length > 200
      ? plainText.substring(0, 200) + '...'
      : plainText;
  }

  navigateToPost(id: number): void {
    this.router.navigate(['/post', id]);
  }
}

================
File: src/app/services/auth.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, tap } from 'rxjs';
import { Router } from '@angular/router';
import { inject } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:3000';
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  private router = inject(Router);
  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();

  constructor(private http: HttpClient) {
    // Check if token exists in localStorage on service initialization
    const token = localStorage.getItem('token');
    if (token) {
      this.isAuthenticatedSubject.next(true);
    }
  }

  login(email: string, password: string): Observable<any> {
    return this.http
      .post(
        `${this.apiUrl}/users/login`,
        { email, password },
        { withCredentials: true }
      )
      .pipe(
        tap((response: any) => {
          if (response.token) {
            localStorage.setItem('token', response.token);
            this.isAuthenticatedSubject.next(true);
          }
        })
      );
  }

  logout(): Observable<any> {
    return this.http
      .post(`${this.apiUrl}/users/logout`, {}, { withCredentials: true })
      .pipe(
        tap(() => {
          localStorage.removeItem('token');
          this.isAuthenticatedSubject.next(false);
          this.router.navigate(['/login']);
        })
      );
  }
}

================
File: src/app/utils/interfaces.ts
================
export interface LoginCredentials {
  email: string;
  password: string;
}

export interface PostInterface {
  id: string;
  title: string;
  content: string;
}

export interface Category {
  id: string;
  name: string;
}

export interface PostInterface {
  id: string;
  title: string;
  content: string;
  categories?: Category[];
}

================
File: src/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>GenericBlog</title>
    <base href="/" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="icon"
      type="image/png"
      sizes="64x64"
      href="assets/images/icon.png"
    />
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>

================
File: src/main.ts
================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));

================
File: src/proxy.conf.json
================
{
  "/assets/uploads": {
    "target": "http://localhost:3000",
    "secure": false,
    "pathRewrite": {
      "^/assets/uploads": "/assets/uploads"
    }
  }
}

================
File: src/styles.css
================
/* You can add global styles to this file, and also import other style files */
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{html,ts}", // Include all HTML and TypeScript files
  ],
  theme: {
    extend: {},
  },
  plugins: [require("@tailwindcss/typography")],
};

================
File: todo
================
add categories in creating / editing posts
remove upload image from edit and new. have a new component that exclusively uploads images and checks the urls after that. then copy the image url and use that in the url of edit or new.

================
File: tsconfig.app.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

================
File: tsconfig.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

================
File: tsconfig.spec.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
