This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-09T10:51:01.664Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.editorconfig
.gitignore
angular copy.json
angular.json
front.txt
package.json
README.md
src/app/api/api.service.ts
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.config.ts
src/app/app.routes.ts
src/app/components/dashboard/dashboard.component.html
src/app/components/dashboard/dashboard.component.ts
src/app/components/edit-post/edit-post.component.html
src/app/components/edit-post/edit-post.component.ts
src/app/components/login/login.component.html
src/app/components/login/login.component.ts
src/app/components/new-post/new-post.component.html
src/app/components/new-post/new-post.component.ts
src/app/components/post/post.component.html
src/app/components/post/post.component.ts
src/app/components/posts/posts.component.html
src/app/components/posts/posts.component.ts
src/app/components/tinymce/tinymce.component.html
src/app/components/tinymce/tinymce.component.ts
src/app/services/auth.service.ts
src/app/utils/interfaces.ts
src/index.html
src/main.ts
src/styles.css
tailwind.config.js
todo
tsconfig.app.json
tsconfig.json
tsconfig.spec.json

================================================================
Repository Files
================================================================

================
File: .editorconfig
================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false

================
File: .gitignore
================
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db

================
File: angular copy.json
================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "generic-blog": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/generic-blog",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "generic-blog:build:production"
            },
            "development": {
              "buildTarget": "generic-blog:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": ["zone.js", "zone.js/testing"],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          }
        }
      }
    }
  }
}

================
File: angular.json
================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "generic-blog": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/generic-blog",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "generic-blog:build:production"
            },
            "development": {
              "buildTarget": "generic-blog:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": ["zone.js", "zone.js/testing"],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          }
        }
      }
    }
  }
}

================
File: front.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-07T11:05:45.998Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.editorconfig
.gitignore
angular.json
package.json
README.md
src/app/api/api.service.ts
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.config.ts
src/app/app.routes.ts
src/app/components/post/post.component.html
src/app/components/post/post.component.ts
src/app/components/posts/posts.component.html
src/app/components/posts/posts.component.ts
src/app/components/tinymce/tinymce.component.html
src/app/components/tinymce/tinymce.component.ts
src/app/utils/interfaces.ts
src/index.html
src/main.ts
src/styles.css
tailwind.config.js
todo
tsconfig.app.json
tsconfig.json
tsconfig.spec.json

================================================================
Repository Files
================================================================

================
File: .editorconfig
================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false

================
File: .gitignore
================
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db

================
File: angular.json
================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "generic-blog": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/generic-blog",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "generic-blog:build:production"
            },
            "development": {
              "buildTarget": "generic-blog:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": ["zone.js", "zone.js/testing"],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "node_modules/tinymce",
                "output": "/tinymce/"
              }
            ],
            "styles": ["src/styles.css"],
            "scripts": ["node_modules/tinymce/tinymce.min.js"]
          }
        }
      }
    }
  }
}

================
File: package.json
================
{
  "name": "generic-blog",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.0.0",
    "@angular/common": "^19.0.0",
    "@angular/compiler": "^19.0.0",
    "@angular/core": "^19.0.0",
    "@angular/forms": "^19.0.0",
    "@angular/platform-browser": "^19.0.0",
    "@angular/platform-browser-dynamic": "^19.0.0",
    "@angular/router": "^19.0.0",
    "@tinymce/tinymce-angular": "^8.0.1",
    "rxjs": "~7.8.0",
    "tinymce": "^7.6.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.0.6",
    "@angular/cli": "^19.0.6",
    "@angular/compiler-cli": "^19.0.0",
    "@types/jasmine": "~5.1.0",
    "autoprefixer": "^10.4.20",
    "jasmine-core": "~5.4.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.6.2"
  }
}

================
File: README.md
================
# GenericBlog

This project was generated using [Angular CLI](https://github.com/angular/angular-cli) version 19.0.6.

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.

================
File: src/app/api/api.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class ApiService {
  private http = inject(HttpClient);
  private apiUrl = 'http://localhost:3000';

  getAllPosts(): Observable<any> {
    return this.http.get(`${this.apiUrl}/posts`);
  }

  getPostById(id: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/posts/${id}`);
  }

  //   createData(data: any): Observable<any> {
  //     return this.http.post(`${this.apiUrl}/posts`, data);
  //   }
}

================
File: src/app/app.component.html
================
<div class="bg-blue-500 text-white p-4">Hello, {{ title }}</div>
<div class="flex gap-4 m-4">
  <a routerLink="/posts">Go to posts</a>
  <a routerLink="/post">Test post</a>
  <a routerLink="/tinymce">Editor</a>
  <a *ngIf="showGoBackButton" (click)="goBack()" class="cursor-pointer"
    >Go back</a
  >
</div>

<router-outlet></router-outlet>
<footer class="bg-gray-800 text-white p-4 mt-4">Static Footer</footer>

================
File: src/app/app.component.spec.ts
================
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'generic-blog' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('generic-blog');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, generic-blog');
  });
});

================
File: src/app/app.component.ts
================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  RouterLink,
  RouterOutlet,
  NavigationEnd,
  Router,
} from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterLink, RouterOutlet, CommonModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  title = 'generic-blog';
  showGoBackButton = false;

  constructor(private router: Router) {
    this.router.events.subscribe((event) => {
      if (event instanceof NavigationEnd) {
        this.showGoBackButton = event.url !== '/';
      }
    });
  }

  goBack() {
    this.router.navigate(['/']);
  }
}

================
File: src/app/app.config.ts
================
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';

import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideHttpClient(),
  ],
};

================
File: src/app/app.routes.ts
================
import { Routes } from '@angular/router';
import { PostsComponent } from './components/posts/posts.component';
import { PostComponent } from './components/post/post.component';
import { TinymceComponent } from './components/tinymce/tinymce.component';

export const routes: Routes = [
  {
    path: 'posts',
    component: PostsComponent,
  },
  {
    path: 'post',
    component: PostComponent,
  },
  {
    path: 'tinymce',
    component: TinymceComponent,
  },
];

================
File: src/app/components/post/post.component.html
================
<div class="p-4">
  @if (data$ | async; as post) {
  <div class="mb-4 p-4 border rounded-shadow">
    <h2 class="text-xl font-bold">{{ post.title }}</h2>
    <p class="mt-2 text-gray-600">{{ post.content }}</p>
  </div>
  } @else {
  <div class="text-center text-gray-500">Oops, something went wrong...</div>
  }
</div>

================
File: src/app/components/post/post.component.ts
================
import { ApiService } from '../../api/api.service';
import { Component, inject } from '@angular/core';
import { AsyncPipe } from '@angular/common';

@Component({
  selector: 'app-post',
  standalone: true,
  imports: [AsyncPipe],
  templateUrl: './post.component.html',
})
export class PostComponent {
  private apiService = inject(ApiService);
  data$ = this.apiService.getPostById('c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11');
}

================
File: src/app/components/posts/posts.component.html
================
<div class="p-4">
  @for (post of data$ | async; track post.id) {
  <div class="mb-4 p-4 border rounded-shadow">
    <h2 class="text-xl font-bold">{{ post.title }}</h2>
    <p class="mt-2 text-gray-600">{{ post.content }}</p>
  </div>
  } @empty {
  <div class="text-center text-gray-500">No posts found...</div>
  }
</div>

================
File: src/app/components/posts/posts.component.ts
================
import { ApiService } from '../../api/api.service';
import { Component, inject } from '@angular/core';
import { AsyncPipe } from '@angular/common';

@Component({
  selector: 'app-posts',
  standalone: true,
  imports: [AsyncPipe],
  templateUrl: './posts.component.html',
})
export class PostsComponent {
  private apiService = inject(ApiService);
  data$ = this.apiService.getAllPosts();
}

================
File: src/app/components/tinymce/tinymce.component.html
================
<h1 class="text-3xl font-bold text-center mb-4">TinyMCE 7 Angular Demo</h1>
<editor [init]="init" class="w-[500px] h-[500px]" />

================
File: src/app/components/tinymce/tinymce.component.ts
================
import { Component } from '@angular/core';
import { EditorComponent, TINYMCE_SCRIPT_SRC } from '@tinymce/tinymce-angular';

@Component({
  selector: 'app-tinymce',
  standalone: true,
  imports: [EditorComponent],
  templateUrl: './tinymce.component.html',
  providers: [
    { provide: TINYMCE_SCRIPT_SRC, useValue: 'tinymce/tinymce.min.js' },
  ],
})
export class TinymceComponent {
  init: EditorComponent['init'] = {
    plugins: 'lists link image table code help wordcount',
    toolbar:
      'undo redo | blocks | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | help',
    base_url: '/tinymce', // This should match your assets output path
    suffix: '.min',
    height: 300,
    menubar: false,
    promotion: false,
    skin: 'oxide',
    content_css: 'default',
  };
}

================
File: src/app/utils/interfaces.ts
================
export interface LoginCredentials {
  email: string;
  password: string;
}

export interface PostInterface {
  id: string;
  title: string;
  content: string;
}

================
File: src/index.html
================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>GenericBlog</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>

================
File: src/main.ts
================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));

================
File: src/styles.css
================
/* You can add global styles to this file, and also import other style files */
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{html,ts}", // Include all HTML and TypeScript files
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: todo
================
ui design
login form
dashboard for management of posts / categories

================
File: tsconfig.app.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

================
File: tsconfig.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

================
File: tsconfig.spec.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}

================
File: package.json
================
{
  "name": "generic-blog",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.0.0",
    "@angular/common": "^19.0.0",
    "@angular/compiler": "^19.0.0",
    "@angular/core": "^19.0.0",
    "@angular/forms": "^19.0.0",
    "@angular/platform-browser": "^19.0.0",
    "@angular/platform-browser-dynamic": "^19.0.0",
    "@angular/router": "^19.0.0",
    "@tinymce/tinymce-angular": "^8.0.1",
    "rxjs": "~7.8.0",
    "tinymce": "^7.6.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.0.6",
    "@angular/cli": "^19.0.6",
    "@angular/compiler-cli": "^19.0.0",
    "@types/jasmine": "~5.1.0",
    "autoprefixer": "^10.4.20",
    "jasmine-core": "~5.4.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.6.2"
  }
}

================
File: README.md
================
# GenericBlog

This project was generated using [Angular CLI](https://github.com/angular/angular-cli) version 19.0.6.

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.

================
File: src/app/api/api.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';

interface PostData {
  title: string;
  content: string;
  image_url?: string;
}

@Injectable({
  providedIn: 'root',
})
export class ApiService {
  private http = inject(HttpClient);
  private apiUrl = 'http://localhost:3000';

  getAllPosts(): Observable<any> {
    return this.http.get(`${this.apiUrl}/posts`);
  }

  getPostById(id: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/posts/${id}`);
  }

  createPost(data: PostData): Observable<any> {
    return this.http.post(`${this.apiUrl}/posts`, data, {
      withCredentials: true,
    });
  }

  editPost(id: string, data: PostData): Observable<any> {
    return this.http.put(`${this.apiUrl}/posts/${id}`, data, {
      withCredentials: true,
    });
  }

  deletePost(id: string): Observable<any> {
    return this.http.delete(`${this.apiUrl}/posts/${id}`, {
      withCredentials: true,
    });
  }

  // Helper method to handle local file path
  processLocalFile(file: File): Promise<string> {
    return new Promise((resolve) => {
      // In a real app, you'd handle the file upload to your server here
      // For now, we'll just return the assets path
      const fileName = file.name;
      // Ensure the file is copied to assets/posts/ manually
      resolve(`/assets/posts/${fileName}`);
    });
  }
}

================
File: src/app/app.component.html
================
<div class="min-h-screen flex flex-col">
  <nav class="bg-blue-500 text-white p-4">
    <div class="container mx-auto flex justify-between items-center">
      <div class="text-xl font-bold">
        <a routerLink="/" class="hover:text-blue-200">{{ title }}</a>
      </div>
      <div class="flex gap-4">
        @if (isAuthenticated$ | async) {
        <a routerLink="/dashboard" class="hover:text-blue-200">Dashboard</a>
        <button (click)="logout()" class="hover:text-blue-200">Logout</button>
        } @else {
        <a routerLink="/login" class="hover:text-blue-200">Login</a>
        }
      </div>
    </div>
  </nav>

  <main class="flex-grow container mx-auto p-4">
    <router-outlet></router-outlet>
  </main>

  <footer class="bg-gray-800 text-white p-4">
    <div class="container mx-auto">Static Footer</div>
  </footer>
</div>

================
File: src/app/app.component.spec.ts
================
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'generic-blog' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('generic-blog');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, generic-blog');
  });
});

================
File: src/app/app.component.ts
================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  RouterLink,
  RouterOutlet,
  NavigationEnd,
  Router,
} from '@angular/router';
import { AuthService } from './services/auth.service';
import { inject } from '@angular/core';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterLink, RouterOutlet, CommonModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  title = 'generic-blog';
  private authService = inject(AuthService);
  private router = inject(Router);
  isAuthenticated$ = this.authService.isAuthenticated$;

  constructor() {}

  logout() {
    this.authService.logout().subscribe({
      next: () => {
        this.router.navigate(['/']);
      },
      error: (err) => {
        console.error('Logout failed:', err);
      },
    });
  }
}

================
File: src/app/app.config.ts
================
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';

import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideHttpClient(),
  ],
};

================
File: src/app/app.routes.ts
================
import { Routes } from '@angular/router';
import { PostsComponent } from './components/posts/posts.component';
import { PostComponent } from './components/post/post.component';
import { TinymceComponent } from './components/tinymce/tinymce.component';
import { LoginComponent } from './components/login/login.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { EditPostComponent } from './components/edit-post/edit-post.component';
import { NewPostComponent } from './components/new-post/new-post.component';

export const routes: Routes = [
  {
    path: 'posts',
    component: PostsComponent,
  },
  {
    path: 'post/:id',
    component: PostComponent,
  },
  {
    path: 'tinymce',
    component: TinymceComponent,
  },
  {
    path: 'login',
    component: LoginComponent,
  },
  {
    path: 'dashboard',
    component: DashboardComponent,
  },
  {
    path: 'posts/edit/:id',
    component: EditPostComponent,
  },
  {
    path: 'posts/new',
    component: NewPostComponent,
  },
  {
    path: '',
    redirectTo: 'posts',
    pathMatch: 'full',
  },
];

================
File: src/app/components/dashboard/dashboard.component.html
================
<div class="container mx-auto p-4">
  <!-- Add New Post Button -->
  <div class="flex justify-end mb-6">
    <a
      routerLink="/posts/new"
      class="inline-flex items-center justify-center p-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        class="w-6 h-6"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 4v16m8-8H4"
        />
      </svg>
      <span class="ml-2">New Post</span>
    </a>
  </div>

  <!-- Posts Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    @for (post of posts$ | async; track post.id) {
    <div class="bg-white rounded shadow p-4 relative hover:shadow-md">
      <!-- Delete Button -->

      <!-- Post Content -->
      <a [routerLink]="['/posts/edit', post.id]" class="block">
        <div class="flex gap-x-4 mb-4 justify-between items-center">
          <img src="{{ post.image_url }}" alt="" class="w-20 h-20" />
          <h2 class="text-lg font-bold mb-2 pr-6">{{ post.title }}</h2>
          <button
            (click)="deletePost(post.id)"
            class="text-gray-500 hover:text-red-500"
            title="Delete post"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              class="w-5 h-5"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
              />
            </svg>
          </button>
        </div>

        <p class="text-gray-600 text-sm mb-2">{{ post.content }}</p>
        <div class="text-xs text-gray-500">
          {{ post.created_at | date }}
        </div>
      </a>
    </div>
    } @empty {
    <div class="text-center text-gray-500 py-8">
      No posts found. Click the + button to create your first post.
    </div>
    }
  </div>
</div>

================
File: src/app/components/dashboard/dashboard.component.ts
================
// src/app/components/dashboard/dashboard.component.ts
import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';
import { ApiService } from '../../api/api.service';
import { PostInterface } from '../../utils/interfaces';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule, RouterLink],
  templateUrl: './dashboard.component.html',
})
export class DashboardComponent {
  private apiService = inject(ApiService);
  posts$ = this.apiService.getAllPosts();

  deletePost(id: string) {
    if (confirm('Are you sure you want to delete this post?')) {
      this.apiService.deletePost(id).subscribe({
        next: () => {
          // Refresh the posts list
          this.posts$ = this.apiService.getAllPosts();
        },
        error: (error) => {
          console.error('Error deleting post:', error);
          alert('Failed to delete post. Please try again.');
        },
      });
    }
  }
}

================
File: src/app/components/edit-post/edit-post.component.html
================
<div class="container mx-auto p-4">
  <div class="max-w-4xl mx-auto">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Edit Post</h1>
      <div class="space-x-4">
        <button
          (click)="deletePost()"
          class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
        >
          Delete
        </button>
        <button
          (click)="savePost()"
          class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Save
        </button>
      </div>
    </div>

    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Title</label
        >
        <input
          type="text"
          [(ngModel)]="title"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Post title"
        />
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Image</label
        >

        <!-- Image Upload/URL Toggle -->
        <div class="flex gap-4 mb-2">
          <button
            [class]="
              imageMode === 'url'
                ? 'text-blue-500 font-medium'
                : 'text-gray-500'
            "
            (click)="imageMode = 'url'"
          >
            URL
          </button>
          <button
            [class]="
              imageMode === 'upload'
                ? 'text-blue-500 font-medium'
                : 'text-gray-500'
            "
            (click)="imageMode = 'upload'"
          >
            Upload
          </button>
        </div>

        <!-- URL Input -->
        <div *ngIf="imageMode === 'url'" class="flex gap-2">
          <input
            type="text"
            [(ngModel)]="imageUrl"
            class="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Image URL"
          />
          <button
            *ngIf="imageUrl"
            (click)="clearImage()"
            class="px-3 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
          >
            Clear
          </button>
        </div>

        <!-- File Upload -->
        <div *ngIf="imageMode === 'upload'" class="flex gap-2">
          <input
            #fileInput
            type="file"
            accept="image/*"
            class="hidden"
            (change)="onFileSelected($event)"
          />
          <button
            (click)="fileInput.click()"
            class="px-4 py-2 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200"
          >
            Choose File
          </button>
          <span *ngIf="selectedFile" class="py-2">
            {{ selectedFile.name }}
          </span>
          <button
            *ngIf="selectedFile"
            (click)="clearFile()"
            class="px-3 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
          >
            Clear
          </button>
        </div>

        <!-- Image Preview -->
        <div *ngIf="imageUrl || selectedFile" class="mt-2">
          <img
            [src]="previewUrl"
            alt="Post image"
            class="max-h-48 rounded shadow"
            (error)="handleImageError()"
          />
        </div>
        <p *ngIf="imageError" class="mt-1 text-sm text-red-500">
          Error loading image. Please check the source.
        </p>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Content</label
        >
        <editor
          [(ngModel)]="content"
          [init]="tinymceInit"
          class="mt-1 min-h-[400px]"
        ></editor>
      </div>
    </div>
  </div>
</div>

================
File: src/app/components/edit-post/edit-post.component.ts
================
import {
  Component,
  ElementRef,
  OnInit,
  ViewChild,
  inject,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { TINYMCE_SCRIPT_SRC, EditorComponent } from '@tinymce/tinymce-angular';
import { ApiService } from '../../api/api.service';

@Component({
  selector: 'app-edit-post',
  standalone: true,
  imports: [CommonModule, FormsModule, EditorComponent],
  providers: [
    { provide: TINYMCE_SCRIPT_SRC, useValue: 'tinymce/tinymce.min.js' },
  ],
  templateUrl: './edit-post.component.html',
})
export class EditPostComponent implements OnInit {
  private apiService = inject(ApiService);
  private route = inject(ActivatedRoute);
  private router = inject(Router);

  @ViewChild('fileInput') fileInput!: ElementRef;

  postId: string = '';
  title: string = '';
  content: string = '';
  imageUrl: string = '';
  imageError: boolean = false;
  imageMode: 'url' | 'upload' = 'url';
  selectedFile: File | null = null;
  previewUrl: string = '';

  tinymceInit: EditorComponent['init'] = {
    plugins: [
      'advlist',
      'autolink',
      'lists',
      'link',
      'image',
      'charmap',
      'preview',
      'anchor',
      'searchreplace',
      'visualblocks',
      'code',
      'fullscreen',
      'insertdatetime',
      'media',
      'table',
      'code',
      'help',
      'wordcount',
    ],
    toolbar:
      'undo redo | blocks | ' +
      'bold italic forecolor | alignleft aligncenter ' +
      'alignright alignjustify | bullist numlist outdent indent | ' +
      'removeformat | help',
    base_url: '/tinymce', // This should match the assets output path
    suffix: '.min',
    height: 500,
    menubar: false,
    promotion: false,
    skin: 'oxide',
    content_style:
      'body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: 14px; }',
  };

  ngOnInit() {
    this.postId = this.route.snapshot.params['id'];
    if (this.postId) {
      this.loadPost();
    }
  }

  private loadPost() {
    this.apiService.getPostById(this.postId).subscribe({
      next: (post) => {
        this.title = post.title;
        this.content = post.content;
        this.imageUrl = post.image_url || '';
        this.updatePreviewUrl();
        this.imageError = false;
      },
      error: (error) => {
        console.error('Error loading post:', error);
        this.router.navigate(['/dashboard']);
      },
    });
  }

  onFileSelected(event: Event) {
    const input = event.target as HTMLInputElement;
    if (input.files?.length) {
      this.selectedFile = input.files[0];
      this.createImagePreview();
    }
  }

  createImagePreview() {
    if (this.selectedFile) {
      const reader = new FileReader();
      reader.onload = () => {
        this.previewUrl = reader.result as string;
      };
      reader.readAsDataURL(this.selectedFile);
    }
  }

  updatePreviewUrl() {
    if (this.imageMode === 'url') {
      this.previewUrl = this.imageUrl;
    } else if (this.selectedFile) {
      this.createImagePreview();
    }
  }

  clearImage() {
    this.imageUrl = '';
    this.previewUrl = '';
    this.imageError = false;
  }

  clearFile() {
    this.selectedFile = null;
    this.previewUrl = '';
    if (this.fileInput) {
      this.fileInput.nativeElement.value = '';
    }
  }

  handleImageError() {
    this.imageError = true;
  }

  async savePost() {
    if (!this.title.trim() || !this.content.trim()) {
      alert('Please fill in both title and content');
      return;
    }

    let finalImageUrl = this.imageUrl;

    // If using file upload and a file is selected, handle the upload first
    if (this.imageMode === 'upload' && this.selectedFile) {
      try {
        finalImageUrl = await this.apiService.processLocalFile(
          this.selectedFile
        );
      } catch (error) {
        console.error('Error processing image:', error);
        alert('Failed to process image. Please try again.');
        return;
      }
    }

    this.apiService
      .editPost(this.postId, {
        title: this.title,
        content: this.content,
        image_url: finalImageUrl,
      })
      .subscribe({
        next: () => {
          this.router.navigate(['/dashboard']);
        },
        error: (error) => {
          console.error('Error saving post:', error);
          alert('Failed to save post. Please try again.');
        },
      });
  }

  deletePost() {
    if (confirm('Are you sure you want to delete this post?')) {
      this.apiService.deletePost(this.postId).subscribe({
        next: () => {
          this.router.navigate(['/dashboard']);
        },
        error: (error) => {
          console.error('Error deleting post:', error);
          alert('Failed to delete post. Please try again.');
        },
      });
    }
  }
}

================
File: src/app/components/login/login.component.html
================
<div class="min-h-screen flex items-center justify-center">
  <div class="max-w-md w-full p-6 bg-white rounded-lg shadow-lg">
    <h2 class="text-2xl font-bold text-center text-gray-800 mb-6">Login</h2>
    <form (ngSubmit)="onSubmit()" class="space-y-4">
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2" for="email">
          Email
        </label>
        <input
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
          id="email"
          type="email"
          [(ngModel)]="email"
          name="email"
          required
        />
      </div>
      <div>
        <label
          class="block text-gray-700 text-sm font-bold mb-2"
          for="password"
        >
          Password
        </label>
        <input
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
          id="password"
          type="password"
          [(ngModel)]="password"
          name="password"
          required
        />
      </div>
      @if (error) {
      <div class="text-red-500 text-sm">{{ error }}</div>
      }
      <button
        type="submit"
        class="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
      >
        Login
      </button>
    </form>
  </div>
</div>

================
File: src/app/components/login/login.component.ts
================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './login.component.html',
})
export class LoginComponent {
  email: string = '';
  password: string = '';
  error: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  onSubmit() {
    if (!this.email || !this.password) {
      this.error = 'Please enter both email and password';
      return;
    }

    this.authService.login(this.email, this.password).subscribe({
      next: () => {
        this.router.navigate(['/']);
      },
      error: (err) => {
        this.error = err.error.error || 'Login failed';
      },
    });
  }
}

================
File: src/app/components/new-post/new-post.component.html
================
<div class="container mx-auto p-4">
  <div class="max-w-4xl mx-auto">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">New Post</h1>
      <button
        (click)="savePost()"
        class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Save
      </button>
    </div>

    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Title</label
        >
        <input
          type="text"
          [(ngModel)]="title"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Post title"
        />
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Content</label
        >
        <editor
          [(ngModel)]="content"
          [init]="tinymceInit"
          class="mt-1 min-h-[400px]"
        ></editor>
      </div>
    </div>
  </div>
</div>

================
File: src/app/components/new-post/new-post.component.ts
================
import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { TINYMCE_SCRIPT_SRC, EditorComponent } from '@tinymce/tinymce-angular';
import { ApiService } from '../../api/api.service';

@Component({
  selector: 'app-new-post',
  standalone: true,
  imports: [CommonModule, FormsModule, EditorComponent],
  providers: [
    { provide: TINYMCE_SCRIPT_SRC, useValue: '/tinymce/tinymce.min.js' },
  ],
  templateUrl: './new-post.component.html',
})
export class NewPostComponent {
  private apiService = inject(ApiService);
  private router = inject(Router);

  title: string = '';
  content: string = '';
  imageUrl: string = '';
  imageError: boolean = false;

  tinymceInit: EditorComponent['init'] = {
    plugins: [
      'advlist',
      'autolink',
      'lists',
      'link',
      'image',
      'charmap',
      'preview',
      'anchor',
      'searchreplace',
      'visualblocks',
      'code',
      'fullscreen',
      'insertdatetime',
      'media',
      'table',
      'code',
      'help',
      'wordcount',
    ],
    toolbar:
      'undo redo | blocks | ' +
      'bold italic forecolor | alignleft aligncenter ' +
      'alignright alignjustify | bullist numlist outdent indent | ' +
      'removeformat | help',
    base_url: '/tinymce', // This should match the assets output path
    suffix: '.min',
    height: 500,
    menubar: false,
    promotion: false,
    skin: 'oxide',
    content_style:
      'body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: 14px; }',
  };

  clearImage() {
    this.imageUrl = '';
    this.imageError = false;
  }

  handleImageError() {
    this.imageError = true;
  }

  savePost() {
    if (!this.title.trim() || !this.content.trim()) {
      alert('Please fill in both title and content');
      return;
    }

    this.apiService
      .createPost({
        title: this.title,
        content: this.content,
        image_url: this.imageUrl,
      })
      .subscribe({
        next: () => {
          this.router.navigate(['/dashboard']);
        },
        error: (error) => {
          console.error('Error creating post:', error);
          alert('Failed to create post. Please try again.');
        },
      });
  }
}

================
File: src/app/components/post/post.component.html
================
<div class="p-4">
  @if (post$ | async; as post) {
  <article class="mb-4 p-4 border rounded-shadow">
    <h2 class="text-xl font-bold">{{ post.title }}</h2>
    <div class="text-gray-600 mb-2">
      <time>{{ post.created_at | date : "medium" }}</time>
    </div>
    <p
      class="prose max-w-none mt-8"
      [innerHTML]="sanitizeContent(post.content)"
    ></p>
  </article>
  } @else {
  <div class="text-center text-gray-500">Oops, something went wrong...</div>
  }
</div>

================
File: src/app/components/post/post.component.ts
================
import { ApiService } from '../../api/api.service';
import { Component, inject, SecurityContext } from '@angular/core';
import { AsyncPipe, DatePipe } from '@angular/common';
import { ActivatedRoute, Params } from '@angular/router';
import { DomSanitizer } from '@angular/platform-browser';
import { map, switchMap } from 'rxjs/operators';

@Component({
  selector: 'app-post',
  standalone: true,
  imports: [AsyncPipe, DatePipe],
  templateUrl: './post.component.html',
})
export class PostComponent {
  private apiService = inject(ApiService);
  private route = inject(ActivatedRoute);
  private sanitizer = inject(DomSanitizer);

  post$ = this.route.params.pipe(
    map((params: Params) => params['id']),
    switchMap((id: string) => this.apiService.getPostById(id))
  );

  sanitizeContent(content: string): string {
    return this.sanitizer.sanitize(SecurityContext.HTML, content) || '';
  }
}

================
File: src/app/components/posts/posts.component.html
================
<div class="p-4">
  <div
    class="flex flex-col items-center md:grid md:grid-cols-2 lg:grid-cols-3 gap-8"
  >
    @for (post of data$ | async; track post.id; let i = $index) {
    <div
      [ngClass]="getGridArea(i)"
      class="bg-white rounded-lg shadow-md overflow-hidden cursor-pointer hover:shadow-lg transition-shadow duration-200 h-64"
      (click)="navigateToPost(post.id)"
    >
      <div class="p-4 flex flex-col justify-around h-full">
        <h2 class="text-xl font-bold">{{ post.title }}</h2>
        <div class="flex mt-2 gap-x-4 items-center">
          <img
            *ngIf="post.image_url"
            [src]="post.image_url"
            alt=""
            class="min-w-20 h-20 rounded-md object-cover"
          />
          <p class="mt-2 text-gray-600 line-clamp-3">
            {{ getPreview(post.content) }}
          </p>
        </div>
      </div>
    </div>
    } @empty {
    <div class="text-center text-gray-500">No posts found...</div>
    }
  </div>
</div>

================
File: src/app/components/posts/posts.component.ts
================
import { ApiService } from '../../api/api.service';
import { Component, inject } from '@angular/core';
import { AsyncPipe, NgClass, NgIf } from '@angular/common';
import { Router } from '@angular/router';

@Component({
  selector: 'app-posts',
  standalone: true,
  imports: [AsyncPipe, NgClass, NgIf],
  templateUrl: './posts.component.html',
})
export class PostsComponent {
  private apiService = inject(ApiService);
  private router = inject(Router);
  data$ = this.apiService.getAllPosts();

  getGridArea(index: number): string {
    const row = Math.floor(index / 3);
    const positionInRow = index % 3;

    if (row % 2 === 0) {
      // Even rows (0, 2, 4...)
      if (positionInRow === 0) return 'lg:col-span-1';
      if (positionInRow === 1) return 'lg:col-span-2';
    } else {
      // Odd rows (1, 3, 5...)
      if (positionInRow === 0) return 'lg:col-span-2';
      if (positionInRow === 1) return 'lg:col-span-1';
    }
    return 'lg:col-span-3';
  }

  getPreview(content: string): string {
    const plainText = content.replace(/<[^>]*>/g, ''); // remove html tags
    return plainText.length > 200
      ? plainText.substring(0, 200) + '...'
      : plainText;
  }

  navigateToPost(id: number): void {
    this.router.navigate(['/post', id]);
  }
}

================
File: src/app/components/tinymce/tinymce.component.html
================
<h1 class="text-3xl font-bold text-center mb-4">TinyMCE 7 Angular Demo</h1>
<editor [init]="init" class="w-[500px] h-[500px]" />

================
File: src/app/components/tinymce/tinymce.component.ts
================
import { Component } from '@angular/core';
import { EditorComponent, TINYMCE_SCRIPT_SRC } from '@tinymce/tinymce-angular';

@Component({
  selector: 'app-tinymce',
  standalone: true,
  imports: [EditorComponent],
  templateUrl: './tinymce.component.html',
  providers: [
    { provide: TINYMCE_SCRIPT_SRC, useValue: 'tinymce/tinymce.min.js' },
  ],
})
export class TinymceComponent {
  init: EditorComponent['init'] = {
    plugins: 'lists link image table code help wordcount',
    toolbar:
      'undo redo | blocks | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | help',
    base_url: '/tinymce', // This should match the assets output path
    suffix: '.min',
    height: 300,
    menubar: false,
    promotion: false,
    skin: 'oxide',
    content_css: 'default',
  };
}

================
File: src/app/services/auth.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, tap } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:3000';
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();

  constructor(private http: HttpClient) {
    // Check if token exists in localStorage on service initialization
    const token = localStorage.getItem('token');
    if (token) {
      this.isAuthenticatedSubject.next(true);
    }
  }

  login(email: string, password: string): Observable<any> {
    return this.http
      .post(
        `${this.apiUrl}/users/login`,
        { email, password },
        { withCredentials: true }
      )
      .pipe(
        tap((response: any) => {
          if (response.token) {
            localStorage.setItem('token', response.token);
            this.isAuthenticatedSubject.next(true);
          }
        })
      );
  }

  logout(): Observable<any> {
    return this.http
      .post(`${this.apiUrl}/users/logout`, {}, { withCredentials: true })
      .pipe(
        tap(() => {
          localStorage.removeItem('token');
          this.isAuthenticatedSubject.next(false);
        })
      );
  }
}

================
File: src/app/utils/interfaces.ts
================
export interface LoginCredentials {
  email: string;
  password: string;
}

export interface PostInterface {
  id: string;
  title: string;
  content: string;
}

================
File: src/index.html
================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>GenericBlog</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>

================
File: src/main.ts
================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));

================
File: src/styles.css
================
/* You can add global styles to this file, and also import other style files */
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{html,ts}", // Include all HTML and TypeScript files
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: todo
================
ui design
login form
dashboard for management of posts / categories

================
File: tsconfig.app.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

================
File: tsconfig.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

================
File: tsconfig.spec.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
